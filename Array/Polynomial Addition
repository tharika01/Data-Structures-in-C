#include <stdio.h>
#define MAXTERMS 100

struct polynomial
{
    float coeff;
    int exp;
};
struct polynomial poly[MAXTERMS];//declared an array of structure globally
int avail = 0;

void poly_Add(int SA,int FA,int SB,int FB,int *SD,int*FD);
void attach_poly(float coeff,int exp);
void poly_Add(int SA,int FA,int SB,int FB,int *SD,int*FD);

int main()
{
    int SA,FA,SB,FB,nA,nB,SD,FD,i;
    
    printf("Enter the number of terms in poly A");
    scanf("%d",&nA);
    SA = 0;
    for(i = 0;i < nA;i++)
    {
        printf("Term %d: ",i+1);
        scanf("%f %d",&poly[i].coeff,&poly[i].exp);
    }
    FA= i -1;//or SD = nA - 1
    SB = i;//SB = nA
    
    printf("Enter the number of terms in poly b");
    scanf("%d",&nB);
    for(i = SB;i < (nA+nB);i++)
    {
        printf("Term %d: ",i+1);
        scanf("%f %d",&poly[i].coeff,&poly[i].exp);
    }
    FB = i - 1;//FD = (na + nB) - 1
    FD = 0;
    avail = i;
    poly_Add(SA,FA,SB,FB,&SD,&FD);
    printf("Sum =  \n");
    for(i = SD;i < FD;i++)
    {
        printf("(%fX)^%d\t",poly[i].coeff,poly[i].exp);
    }
    return 0;
}
int compare(int a ,int b)
{
    if(a < b)
        return -1;
    else if(a == b)
        return 0;
    else
        return 1;
}
void attach_poly(float coeff,int exp)
{
    poly[avail].coeff = coeff;
    poly[avail].exp = exp;
    avail++;
}
void poly_Add(int SA,int FA,int SB,int FB,int *SD,int*FD)
{
    *SD = avail;
    float coeff;
    while((SA <= FA) &&(SB <= FB))
    {
        switch(compare(poly[SA].exp,poly[SB].exp))
        {
            case -1:
                attach_poly(poly[SB].coeff,poly[SB].exp);
                SB++;
                break;
            
            case 0:
                coeff = poly[SA].coeff + poly[SB].coeff;
                attach_poly(coeff,poly[SA].exp);
                SA++;
                SB++;
                break;
                
            case 1:
                attach_poly(poly[SA].coeff,poly[SA].exp);
                SA++;
                break;
        }
    }
    for(;SA <= FA;SA++)
            attach_poly(poly[SA].coeff,poly[SA].exp);
    for(;SB <= FB;SB++)
            attach_poly(poly[SB].coeff,poly[SB].exp);
    *FD = avail;
}
